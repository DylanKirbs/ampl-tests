<program> at 1:1.
  <subdef> at 2:5.
    <type> at 2:15.
    </type> at 2:19.
    <type> at 2:25.
    </type> at 2:28.
    <body> at 3:9.
      <statements> at 3:9.
        <statement> at 3:9.
          <if> at 3:9.
            <expr> at 3:12.
              <simple> at 3:12.
                <term> at 3:12.
                  <factor> at 3:12.
                  </factor> at 3:14.
                </term> at 3:14.
              </simple> at 3:14.
              <simple> at 3:17.
                <term> at 3:17.
                  <factor> at 3:17.
                  </factor> at 3:18.
                </term> at 3:18.
              </simple> at 3:18.
            </expr> at 3:18.
            <statements> at 4:13.
              <statement> at 4:13.
                <return> at 4:13.
                  <expr> at 4:20.
                    <simple> at 4:20.
                      <term> at 4:20.
                        <factor> at 4:20.
                        </factor> at 5:9.
                      </term> at 5:9.
                    </simple> at 5:9.
                  </expr> at 5:9.
                </return> at 5:9.
              </statement> at 5:9.
            </statements> at 5:9.
            <else> at 5:9.
            <statements> at 6:13.
              <statement> at 6:13.
                <return> at 6:13.
                  <expr> at 6:20.
                    <simple> at 6:20.
                      <term> at 6:20.
                        <factor> at 6:20.
                          <arglist> at 6:29.
                            <expr> at 6:30.
                              <simple> at 6:30.
                                <term> at 6:30.
                                  <factor> at 6:30.
                                  </factor> at 6:32.
                                </term> at 6:32.
                                <term> at 6:34.
                                  <factor> at 6:34.
                                  </factor> at 6:35.
                                </term> at 6:35.
                              </simple> at 6:35.
                            </expr> at 6:35.
                          </arglist> at 6:37.
                        </factor> at 6:37.
                      </term> at 6:37.
                      <term> at 6:39.
                        <factor> at 6:39.
                          <arglist> at 6:48.
                            <expr> at 6:49.
                              <simple> at 6:49.
                                <term> at 6:49.
                                  <factor> at 6:49.
                                  </factor> at 6:51.
                                </term> at 6:51.
                                <term> at 6:53.
                                  <factor> at 6:53.
                                  </factor> at 6:54.
                                </term> at 6:54.
                              </simple> at 6:54.
                            </expr> at 6:54.
                          </arglist> at 7:9.
                        </factor> at 7:9.
                      </term> at 7:9.
                    </simple> at 7:9.
                  </expr> at 7:9.
                </return> at 7:9.
              </statement> at 7:9.
            </statements> at 7:9.
            </else> at 7:9.
          </if> at 9:5.
        </statement> at 9:5.
      </statements> at 9:5.
    </body> at 9:5.
  </subdef> at 9:5.
  <body> at 10:9.
    <vardef> at 10:9.
      <type> at 10:9.
      </type> at 10:13.
    </vardef> at 11:9.
    <statements> at 11:9.
      <statement> at 11:9.
        <assign> at 11:9.
          <expr> at 11:25.
            <simple> at 11:25.
              <term> at 11:25.
                <factor> at 11:25.
                </factor> at 11:27.
              </term> at 11:27.
            </simple> at 11:27.
          </expr> at 11:27.
        </assign> at 11:27.
      </statement> at 11:27.
      <statement> at 12:9.
        <assign> at 12:9.
          <expr> at 12:17.
            <simple> at 12:17.
              <term> at 12:17.
                <factor> at 12:17.
                </factor> at 12:18.
              </term> at 12:18.
            </simple> at 12:18.
          </expr> at 12:18.
        </assign> at 12:18.
      </statement> at 12:18.
      <statement> at 14:9.
        <while> at 14:9.
          <expr> at 14:15.
            <simple> at 14:15.
              <term> at 14:15.
                <factor> at 14:15.
                </factor> at 14:25.
              </term> at 14:25.
            </simple> at 14:25.
            <simple> at 14:27.
              <term> at 14:27.
                <factor> at 14:27.
                </factor> at 14:28.
              </term> at 14:28.
            </simple> at 14:28.
          </expr> at 14:28.
          <statements> at 15:13.
            <statement> at 15:13.
              <assign> at 15:13.
                <expr> at 15:35.
                  <simple> at 15:35.
                    <term> at 15:35.
                      <factor> at 15:35.
                        <arglist> at 15:44.
                          <expr> at 15:45.
                            <simple> at 15:45.
                              <term> at 15:45.
                                <factor> at 15:45.
                                </factor> at 15:46.
                              </term> at 15:46.
                            </simple> at 15:46.
                          </expr> at 15:46.
                        </arglist> at 15:47.
                      </factor> at 15:47.
                    </term> at 15:47.
                  </simple> at 15:47.
                </expr> at 15:47.
              </assign> at 15:47.
            </statement> at 15:47.
            <statement> at 16:13.
              <output> at 16:13.
                <expr> at 16:36.
                  <simple> at 16:36.
                    <term> at 16:36.
                      <factor> at 16:36.
                      </factor> at 16:38.
                    </term> at 16:38.
                  </simple> at 16:38.
                </expr> at 16:38.
                <expr> at 16:51.
                  <simple> at 16:51.
                    <term> at 16:51.
                      <factor> at 16:51.
                      </factor> at 16:66.
                    </term> at 16:66.
                  </simple> at 16:66.
                </expr> at 16:66.
              </output> at 16:74.
            </statement> at 16:74.
            <statement> at 17:13.
              <assign> at 17:13.
                <expr> at 17:29.
                  <simple> at 17:29.
                    <term> at 17:29.
                      <factor> at 17:29.
                      </factor> at 17:39.
                    </term> at 17:39.
                    <term> at 17:41.
                      <factor> at 17:41.
                      </factor> at 17:42.
                    </term> at 17:42.
                  </simple> at 17:42.
                </expr> at 17:42.
              </assign> at 17:42.
            </statement> at 17:42.
            <statement> at 18:13.
              <assign> at 18:13.
                <expr> at 18:21.
                  <simple> at 18:21.
                    <term> at 18:21.
                      <factor> at 18:21.
                      </factor> at 18:23.
                    </term> at 18:23.
                    <term> at 18:25.
                      <factor> at 18:25.
                      </factor> at 19:9.
                    </term> at 19:9.
                  </simple> at 19:9.
                </expr> at 19:9.
              </assign> at 19:9.
            </statement> at 19:9.
          </statements> at 19:9.
        </while> at 19:12.
      </statement> at 19:12.
    </statements> at 19:12.
  </body> at 19:12.
</program> at 19:12.
Generated: test44.class
.class public test44
.super java/lang/Object

.field private static final charsetName Ljava/lang/String;
.field private static final usLocale Ljava/util/Locale;
.field private static final scanner Ljava/util/Scanner;

.method static public <clinit>()V
.limit stack 5
.limit locals 1 
	ldc	"UTF-8"
	putstatic test44/charsetName Ljava/lang/String;
	new	java/util/Locale
	dup
	ldc	"en"
	ldc	"US"
	invokespecial java/util/Locale/<init>(Ljava/lang/String;Ljava/lang/String;)V
	putstatic test44/usLocale Ljava/util/Locale;
	new	java/util/Scanner
	dup
	new	java/io/BufferedInputStream
	dup
	getstatic java/lang/System/in Ljava/io/InputStream;
	invokespecial java/io/BufferedInputStream/<init>(Ljava/io/InputStream;)V
	getstatic test44/charsetName Ljava/lang/String;
	invokespecial java/util/Scanner/<init>(Ljava/io/InputStream;Ljava/lang/String;)V
	putstatic test44/scanner Ljava/util/Scanner;
	getstatic test44/scanner Ljava/util/Scanner;
	getstatic test44/usLocale Ljava/util/Locale;
	invokevirtual java/util/Scanner/useLocale(Ljava/util/Locale;)Ljava/util/Scanner;
	pop
	return
.end method

.method public <init>()V
	aload_0
	invokespecial java/lang/Object/<init>()V
	return
.end method

.method public static readInt()I
.limit stack 1
.limit locals 1
	getstatic test44/scanner Ljava/util/Scanner;
	invokevirtual java/util/Scanner/nextInt()I
	ireturn
.end method

.method public static readBoolean()Z
.limit stack 2
.limit locals 1
	getstatic test44/scanner Ljava/util/Scanner;
	invokevirtual java/util/Scanner/next()Ljava/lang/String;
	astore 0
	aload 0
	ldc	"true"
	invokevirtual java/lang/String/equalsIgnoreCase(Ljava/lang/String;)Z
	ifeq False
	iconst_1
	ireturn
False:
	aload 0
	ldc	"false"
	invokevirtual java/lang/String/equalsIgnoreCase(Ljava/lang/String;)Z
	ifeq Exception
	iconst_0
	ireturn
Exception:
	new	java/util/InputMismatchException
	dup
	invokespecial java/util/InputMismatchException/<init>()V
	athrow
.end method

.method public static main([Ljava/lang/String;)V
.limit stack 15
.limit locals 4
	ldc 30
	istore 1
	ldc 0
	istore 3
L5:
	iload 1
	ldc 0
	if_icmpgt L7
	ldc 0
	goto L8
L7:
	ldc 1
L8:
	ifeq L6
	iload 3
	invokestatic test44.Fibonacci(I)I
	istore 2
	getstatic java/lang/System/out Ljava/io/PrintStream;
	ldc "Fibonacci("
	invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V
	iload 3
	getstatic java/lang/System/out Ljava/io/PrintStream;
	swap
	invokevirtual java/io/PrintStream/print(I)V
	getstatic java/lang/System/out Ljava/io/PrintStream;
	ldc ") = "
	invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V
	iload 2
	getstatic java/lang/System/out Ljava/io/PrintStream;
	swap
	invokevirtual java/io/PrintStream/print(I)V
	getstatic java/lang/System/out Ljava/io/PrintStream;
	ldc "\n"
	invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V
	iload 1
	ldc 1
	isub
	istore 1
	iload 3
	ldc 1
	iadd
	istore 3
	goto L5
L6:
	return
.end method

.method public static Fibonacci(I)I
.limit stack 6
.limit locals 1
	iload 0
	ldc 1
	if_icmple L3
	ldc 0
	goto L4
L3:
	ldc 1
L4:
	ifeq L2
	iload 0
	ireturn
	goto L1
L2:
	iload 0
	ldc 1
	isub
	invokestatic test44.Fibonacci(I)I
	iload 0
	ldc 2
	isub
	invokestatic test44.Fibonacci(I)I
	iadd
	ireturn
L1:
	return
.end method

Success!
