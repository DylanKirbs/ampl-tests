<program> at 1:1.
  <body> at 4:9.
    <vardef> at 4:9.
      <type> at 4:9.
      </type> at 4:13.
    </vardef> at 5:9.
    <statements> at 5:9.
      <statement> at 5:9.
        <assign> at 5:9.
          <expr> at 5:24.
            <simple> at 5:24.
              <term> at 5:24.
                <factor> at 5:24.
                </factor> at 5:25.
              </term> at 5:25.
            </simple> at 5:25.
          </expr> at 5:25.
        </assign> at 5:25.
      </statement> at 5:25.
      <statement> at 7:9.
        <assign> at 7:9.
          <expr> at 7:17.
            <simple> at 7:17.
              <term> at 7:17.
                <factor> at 7:17.
                </factor> at 7:18.
              </term> at 7:18.
            </simple> at 7:18.
          </expr> at 7:18.
        </assign> at 7:18.
      </statement> at 7:18.
      <statement> at 8:9.
        <while> at 8:9.
          <expr> at 8:15.
            <simple> at 8:15.
              <term> at 8:15.
                <factor> at 8:15.
                </factor> at 8:17.
              </term> at 8:17.
            </simple> at 8:17.
            <simple> at 8:19.
              <term> at 8:19.
                <factor> at 8:19.
                </factor> at 8:21.
              </term> at 8:21.
            </simple> at 8:21.
          </expr> at 8:21.
          <statements> at 9:13.
            <statement> at 9:13.
              <assign> at 9:13.
                <expr> at 9:28.
                  <simple> at 9:28.
                    <term> at 9:28.
                      <factor> at 9:28.
                      </factor> at 9:37.
                    </term> at 9:37.
                    <term> at 9:39.
                      <factor> at 9:39.
                      </factor> at 9:49.
                    </term> at 9:49.
                  </simple> at 9:49.
                </expr> at 9:49.
              </assign> at 9:49.
            </statement> at 9:49.
            <statement> at 10:13.
              <assign> at 10:13.
                <expr> at 10:21.
                  <simple> at 10:21.
                    <term> at 10:21.
                      <factor> at 10:21.
                      </factor> at 10:23.
                    </term> at 10:23.
                    <term> at 10:25.
                      <factor> at 10:25.
                      </factor> at 11:9.
                    </term> at 11:9.
                  </simple> at 11:9.
                </expr> at 11:9.
              </assign> at 11:9.
            </statement> at 11:9.
          </statements> at 11:9.
        </while> at 11:12.
      </statement> at 11:12.
      <statement> at 13:9.
        <output> at 13:9.
          <expr> at 13:16.
            <simple> at 13:16.
              <term> at 13:16.
                <factor> at 13:16.
                </factor> at 13:25.
              </term> at 13:25.
            </simple> at 13:25.
          </expr> at 13:25.
        </output> at 14:2.
      </statement> at 14:2.
    </statements> at 14:2.
  </body> at 14:2.
</program> at 14:2.
Generated: test48.class
.class public test48
.super java/lang/Object

.field private static final charsetName Ljava/lang/String;
.field private static final usLocale Ljava/util/Locale;
.field private static final scanner Ljava/util/Scanner;

.method static public <clinit>()V
.limit stack 5
.limit locals 1 
	ldc	"UTF-8"
	putstatic test48/charsetName Ljava/lang/String;
	new	java/util/Locale
	dup
	ldc	"en"
	ldc	"US"
	invokespecial java/util/Locale/<init>(Ljava/lang/String;Ljava/lang/String;)V
	putstatic test48/usLocale Ljava/util/Locale;
	new	java/util/Scanner
	dup
	new	java/io/BufferedInputStream
	dup
	getstatic java/lang/System/in Ljava/io/InputStream;
	invokespecial java/io/BufferedInputStream/<init>(Ljava/io/InputStream;)V
	getstatic test48/charsetName Ljava/lang/String;
	invokespecial java/util/Scanner/<init>(Ljava/io/InputStream;Ljava/lang/String;)V
	putstatic test48/scanner Ljava/util/Scanner;
	getstatic test48/scanner Ljava/util/Scanner;
	getstatic test48/usLocale Ljava/util/Locale;
	invokevirtual java/util/Scanner/useLocale(Ljava/util/Locale;)Ljava/util/Scanner;
	pop
	return
.end method

.method public <init>()V
	aload_0
	invokespecial java/lang/Object/<init>()V
	return
.end method

.method public static readInt()I
.limit stack 1
.limit locals 1
	getstatic test48/scanner Ljava/util/Scanner;
	invokevirtual java/util/Scanner/nextInt()I
	ireturn
.end method

.method public static readBoolean()Z
.limit stack 2
.limit locals 1
	getstatic test48/scanner Ljava/util/Scanner;
	invokevirtual java/util/Scanner/next()Ljava/lang/String;
	astore 0
	aload 0
	ldc	"true"
	invokevirtual java/lang/String/equalsIgnoreCase(Ljava/lang/String;)Z
	ifeq False
	iconst_1
	ireturn
False:
	aload 0
	ldc	"false"
	invokevirtual java/lang/String/equalsIgnoreCase(Ljava/lang/String;)Z
	ifeq Exception
	iconst_0
	ireturn
Exception:
	new	java/util/InputMismatchException
	dup
	invokespecial java/util/InputMismatchException/<init>()V
	athrow
.end method

.method public static main([Ljava/lang/String;)V
.limit stack 5
.limit locals 3
	ldc 0
	istore 2
	ldc 0
	istore 1
L1:
	iload 1
	ldc 10
	if_icmplt L3
	ldc 0
	goto L4
L3:
	ldc 1
L4:
	ifeq L2
	iload 2
	ldc 1000000000
	iadd
	istore 2
	iload 1
	ldc 1
	iadd
	istore 1
	goto L1
L2:
	iload 2
	getstatic java/lang/System/out Ljava/io/PrintStream;
	swap
	invokevirtual java/io/PrintStream/print(I)V
	getstatic java/lang/System/out Ljava/io/PrintStream;
	ldc "\n"
	invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V
	return
.end method

Success!
