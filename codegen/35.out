<program> at 1:1.
  <subdef> at 2:1.
    <type> at 2:11.
    </type> at 2:15.
    <type> at 2:22.
    </type> at 2:26.
    <body> at 3:2.
      <vardef> at 3:2.
        <type> at 3:2.
        </type> at 3:6.
      </vardef> at 5:2.
      <statements> at 5:2.
        <statement> at 5:2.
          <assign> at 5:2.
            <expr> at 5:10.
              <simple> at 5:10.
                <term> at 5:10.
                  <factor> at 5:10.
                  </factor> at 5:11.
                </term> at 5:11.
              </simple> at 5:11.
            </expr> at 5:11.
          </assign> at 5:11.
        </statement> at 5:11.
        <statement> at 7:2.
          <if> at 7:2.
            <expr> at 7:5.
              <simple> at 7:5.
                <term> at 7:5.
                  <factor> at 7:5.
                    <expr> at 7:6.
                      <simple> at 7:6.
                        <term> at 7:6.
                          <factor> at 7:6.
                          </factor> at 7:12.
                        </term> at 7:12.
                      </simple> at 7:12.
                      <simple> at 7:15.
                        <term> at 7:15.
                          <factor> at 7:15.
                          </factor> at 7:25.
                        </term> at 7:25.
                      </simple> at 7:25.
                    </expr> at 7:25.
                  </factor> at 7:26.
                </term> at 7:26.
              </simple> at 7:26.
            </expr> at 7:26.
            <statements> at 8:3.
              <statement> at 8:3.
                <return> at 8:3.
                </return> at 9:2.
              </statement> at 9:2.
            </statements> at 9:2.
          </if> at 9:5.
        </statement> at 9:5.
        <statement> at 11:2.
          <while> at 11:2.
            <expr> at 11:8.
              <simple> at 11:8.
                <term> at 11:8.
                  <factor> at 11:8.
                    <expr> at 11:9.
                      <simple> at 11:9.
                        <term> at 11:9.
                          <factor> at 11:9.
                          </factor> at 11:11.
                        </term> at 11:11.
                      </simple> at 11:11.
                      <simple> at 11:14.
                        <term> at 11:14.
                          <factor> at 11:14.
                          </factor> at 11:24.
                        </term> at 11:24.
                      </simple> at 11:24.
                    </expr> at 11:24.
                  </factor> at 11:25.
                </term> at 11:25.
              </simple> at 11:25.
            </expr> at 11:25.
            <statements> at 12:3.
              <statement> at 12:3.
                <output> at 12:3.
                </output> at 12:14.
              </statement> at 12:14.
              <statement> at 13:3.
                <assign> at 13:3.
                  <expr> at 13:11.
                    <simple> at 13:11.
                      <term> at 13:11.
                        <factor> at 13:11.
                        </factor> at 13:13.
                      </term> at 13:13.
                      <term> at 13:15.
                        <factor> at 13:15.
                        </factor> at 14:2.
                      </term> at 14:2.
                    </simple> at 14:2.
                  </expr> at 14:2.
                </assign> at 14:2.
              </statement> at 14:2.
            </statements> at 14:2.
          </while> at 14:5.
        </statement> at 14:5.
        <statement> at 16:2.
          <output> at 16:2.
          </output> at 16:14.
        </statement> at 16:14.
        <statement> at 17:2.
          <assign> at 17:2.
            <expr> at 17:19.
              <simple> at 17:19.
                <term> at 17:19.
                  <factor> at 17:19.
                  </factor> at 17:30.
                </term> at 17:30.
                <term> at 17:32.
                  <factor> at 17:32.
                  </factor> at 17:33.
                </term> at 17:33.
              </simple> at 17:33.
            </expr> at 17:33.
          </assign> at 17:33.
        </statement> at 17:33.
        <statement> at 18:2.
          <call> at 18:2.
            <arglist> at 18:11.
              <expr> at 18:12.
                <simple> at 18:12.
                  <term> at 18:12.
                    <factor> at 18:12.
                    </factor> at 18:17.
                  </term> at 18:17.
                </simple> at 18:17.
              </expr> at 18:17.
              <expr> at 18:19.
                <simple> at 18:19.
                  <term> at 18:19.
                    <factor> at 18:19.
                    </factor> at 18:29.
                  </term> at 18:29.
                </simple> at 18:29.
              </expr> at 18:29.
            </arglist> at 20:1.
          </call> at 20:1.
        </statement> at 20:1.
      </statements> at 20:1.
    </body> at 20:1.
  </subdef> at 20:1.
  <body> at 21:2.
    <statements> at 21:2.
      <statement> at 21:2.
        <call> at 21:2.
          <arglist> at 21:11.
            <expr> at 21:12.
              <simple> at 21:12.
                <term> at 21:12.
                  <factor> at 21:12.
                  </factor> at 21:16.
                </term> at 21:16.
              </simple> at 21:16.
            </expr> at 21:16.
            <expr> at 21:18.
              <simple> at 21:18.
                <term> at 21:18.
                  <factor> at 21:18.
                  </factor> at 21:19.
                </term> at 21:19.
              </simple> at 21:19.
            </expr> at 21:19.
          </arglist> at 22:1.
        </call> at 22:1.
      </statement> at 22:1.
    </statements> at 22:1.
  </body> at 22:1.
</program> at 22:1.
Generated: test35.class
.class public test35
.super java/lang/Object

.field private static final charsetName Ljava/lang/String;
.field private static final usLocale Ljava/util/Locale;
.field private static final scanner Ljava/util/Scanner;

.method static public <clinit>()V
.limit stack 5
.limit locals 1 
	ldc	"UTF-8"
	putstatic test35/charsetName Ljava/lang/String;
	new	java/util/Locale
	dup
	ldc	"en"
	ldc	"US"
	invokespecial java/util/Locale/<init>(Ljava/lang/String;Ljava/lang/String;)V
	putstatic test35/usLocale Ljava/util/Locale;
	new	java/util/Scanner
	dup
	new	java/io/BufferedInputStream
	dup
	getstatic java/lang/System/in Ljava/io/InputStream;
	invokespecial java/io/BufferedInputStream/<init>(Ljava/io/InputStream;)V
	getstatic test35/charsetName Ljava/lang/String;
	invokespecial java/util/Scanner/<init>(Ljava/io/InputStream;Ljava/lang/String;)V
	putstatic test35/scanner Ljava/util/Scanner;
	getstatic test35/scanner Ljava/util/Scanner;
	getstatic test35/usLocale Ljava/util/Locale;
	invokevirtual java/util/Scanner/useLocale(Ljava/util/Locale;)Ljava/util/Scanner;
	pop
	return
.end method

.method public <init>()V
	aload_0
	invokespecial java/lang/Object/<init>()V
	return
.end method

.method public static readInt()I
.limit stack 1
.limit locals 1
	getstatic test35/scanner Ljava/util/Scanner;
	invokevirtual java/util/Scanner/nextInt()I
	ireturn
.end method

.method public static readBoolean()Z
.limit stack 2
.limit locals 1
	getstatic test35/scanner Ljava/util/Scanner;
	invokevirtual java/util/Scanner/next()Ljava/lang/String;
	astore 0
	aload 0
	ldc	"true"
	invokevirtual java/lang/String/equalsIgnoreCase(Ljava/lang/String;)Z
	ifeq False
	iconst_1
	ireturn
False:
	aload 0
	ldc	"false"
	invokevirtual java/lang/String/equalsIgnoreCase(Ljava/lang/String;)Z
	ifeq Exception
	iconst_0
	ireturn
Exception:
	new	java/util/InputMismatchException
	dup
	invokespecial java/util/InputMismatchException/<init>()V
	athrow
.end method

.method public static main([Ljava/lang/String;)V
.limit stack 3
.limit locals 1
	ldc 2000
	ldc 1
	invokestatic test35.rickyrect(II)V
	return
.end method

.method public static rickyrect(II)V
.limit stack 9
.limit locals 3
	ldc 0
	istore 2
	iload 0
	iload 1
	if_icmple L3
	ldc 0
	goto L4
L3:
	ldc 1
L4:
	ifeq L2
	return
	goto L1
L2:
L1:
L5:
	iload 2
	iload 1
	if_icmpne L7
	ldc 0
	goto L8
L7:
	ldc 1
L8:
	ifeq L6
	getstatic java/lang/System/out Ljava/io/PrintStream;
	ldc "-"
	invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V
	iload 2
	ldc 1
	iadd
	istore 2
	goto L5
L6:
	getstatic java/lang/System/out Ljava/io/PrintStream;
	ldc "\n"
	invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V
	iload 1
	ldc 1
	iadd
	istore 1
	iload 0
	iload 1
	invokestatic test35.rickyrect(II)V
	return
.end method

Success!
