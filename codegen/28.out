<program> at 1:1.
  <body> at 3:5.
    <vardef> at 3:5.
      <type> at 3:5.
      </type> at 3:9.
    </vardef> at 4:5.
    <statements> at 4:5.
      <statement> at 4:5.
        <assign> at 4:5.
          <expr> at 4:14.
            <simple> at 4:14.
              <term> at 4:14.
                <factor> at 4:14.
                </factor> at 4:15.
              </term> at 4:15.
            </simple> at 4:15.
          </expr> at 4:15.
        </assign> at 4:15.
      </statement> at 4:15.
      <statement> at 5:5.
        <while> at 5:5.
          <expr> at 5:11.
            <simple> at 5:11.
              <term> at 5:11.
                <factor> at 5:11.
                  <expr> at 5:12.
                    <simple> at 5:12.
                      <term> at 5:12.
                        <factor> at 5:12.
                        </factor> at 5:15.
                      </term> at 5:15.
                    </simple> at 5:15.
                    <simple> at 5:18.
                      <term> at 5:18.
                        <factor> at 5:18.
                        </factor> at 5:20.
                      </term> at 5:20.
                    </simple> at 5:20.
                  </expr> at 5:20.
                </factor> at 5:21.
              </term> at 5:21.
            </simple> at 5:21.
          </expr> at 5:21.
          <statements> at 6:9.
            <statement> at 6:9.
              <output> at 6:9.
                <expr> at 6:16.
                  <simple> at 6:16.
                    <term> at 6:16.
                      <factor> at 6:16.
                      </factor> at 6:19.
                    </term> at 6:19.
                  </simple> at 6:19.
                </expr> at 6:19.
              </output> at 6:27.
            </statement> at 6:27.
            <statement> at 7:9.
              <assign> at 7:9.
                <expr> at 7:18.
                  <simple> at 7:18.
                    <term> at 7:18.
                      <factor> at 7:18.
                        <expr> at 7:19.
                          <simple> at 7:19.
                            <term> at 7:19.
                              <factor> at 7:19.
                              </factor> at 7:22.
                            </term> at 7:22.
                            <term> at 7:24.
                              <factor> at 7:24.
                              </factor> at 7:25.
                            </term> at 7:25.
                          </simple> at 7:25.
                        </expr> at 7:25.
                      </factor> at 7:26.
                    </term> at 7:26.
                  </simple> at 7:26.
                </expr> at 7:26.
              </assign> at 7:26.
            </statement> at 7:26.
            <statement> at 8:3.
              <if> at 8:3.
                <expr> at 8:6.
                  <simple> at 8:6.
                    <term> at 8:6.
                      <factor> at 8:6.
                        <expr> at 8:7.
                          <simple> at 8:7.
                            <term> at 8:7.
                              <factor> at 8:7.
                              </factor> at 8:10.
                            </term> at 8:10.
                          </simple> at 8:10.
                          <simple> at 8:12.
                            <term> at 8:12.
                              <factor> at 8:12.
                              </factor> at 8:14.
                            </term> at 8:14.
                          </simple> at 8:14.
                        </expr> at 8:14.
                      </factor> at 8:15.
                    </term> at 8:15.
                  </simple> at 8:15.
                </expr> at 8:15.
                <statements> at 9:4.
                  <statement> at 9:4.
                    <output> at 9:4.
                    </output> at 9:21.
                  </statement> at 9:21.
                  <statement> at 10:4.
                    <return> at 10:4.
                    </return> at 11:3.
                  </statement> at 11:3.
                </statements> at 11:3.
              </if> at 12:5.
            </statement> at 12:5.
          </statements> at 12:5.
        </while> at 13:1.
      </statement> at 13:1.
    </statements> at 13:1.
  </body> at 13:1.
</program> at 13:1.
Generated: test28.class
.class public test28
.super java/lang/Object

.field private static final charsetName Ljava/lang/String;
.field private static final usLocale Ljava/util/Locale;
.field private static final scanner Ljava/util/Scanner;

.method static public <clinit>()V
.limit stack 5
.limit locals 1 
	ldc	"UTF-8"
	putstatic test28/charsetName Ljava/lang/String;
	new	java/util/Locale
	dup
	ldc	"en"
	ldc	"US"
	invokespecial java/util/Locale/<init>(Ljava/lang/String;Ljava/lang/String;)V
	putstatic test28/usLocale Ljava/util/Locale;
	new	java/util/Scanner
	dup
	new	java/io/BufferedInputStream
	dup
	getstatic java/lang/System/in Ljava/io/InputStream;
	invokespecial java/io/BufferedInputStream/<init>(Ljava/io/InputStream;)V
	getstatic test28/charsetName Ljava/lang/String;
	invokespecial java/util/Scanner/<init>(Ljava/io/InputStream;Ljava/lang/String;)V
	putstatic test28/scanner Ljava/util/Scanner;
	getstatic test28/scanner Ljava/util/Scanner;
	getstatic test28/usLocale Ljava/util/Locale;
	invokevirtual java/util/Scanner/useLocale(Ljava/util/Locale;)Ljava/util/Scanner;
	pop
	return
.end method

.method public <init>()V
	aload_0
	invokespecial java/lang/Object/<init>()V
	return
.end method

.method public static readInt()I
.limit stack 1
.limit locals 1
	getstatic test28/scanner Ljava/util/Scanner;
	invokevirtual java/util/Scanner/nextInt()I
	ireturn
.end method

.method public static readBoolean()Z
.limit stack 2
.limit locals 1
	getstatic test28/scanner Ljava/util/Scanner;
	invokevirtual java/util/Scanner/next()Ljava/lang/String;
	astore 0
	aload 0
	ldc	"true"
	invokevirtual java/lang/String/equalsIgnoreCase(Ljava/lang/String;)Z
	ifeq False
	iconst_1
	ireturn
False:
	aload 0
	ldc	"false"
	invokevirtual java/lang/String/equalsIgnoreCase(Ljava/lang/String;)Z
	ifeq Exception
	iconst_0
	ireturn
Exception:
	new	java/util/InputMismatchException
	dup
	invokespecial java/util/InputMismatchException/<init>()V
	athrow
.end method

.method public static main([Ljava/lang/String;)V
.limit stack 8
.limit locals 2
	ldc 0
	istore 1
L1:
	iload 1
	ldc 30
	if_icmpne L3
	ldc 0
	goto L4
L3:
	ldc 1
L4:
	ifeq L2
	iload 1
	getstatic java/lang/System/out Ljava/io/PrintStream;
	swap
	invokevirtual java/io/PrintStream/print(I)V
	getstatic java/lang/System/out Ljava/io/PrintStream;
	ldc "\n"
	invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V
	iload 1
	ldc 1
	iadd
	istore 1
	iload 1
	ldc 15
	if_icmpeq L7
	ldc 0
	goto L8
L7:
	ldc 1
L8:
	ifeq L6
	getstatic java/lang/System/out Ljava/io/PrintStream;
	ldc "chow \n"
	invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V
	return
	goto L5
L6:
L5:
	goto L1
L2:
	return
.end method

Success!
