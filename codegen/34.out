<program> at 1:1.
  <subdef> at 2:1.
    <type> at 2:5.
    </type> at 2:9.
    <type> at 2:12.
    </type> at 2:17.
    <type> at 2:23.
    </type> at 2:32.
    <body> at 3:2.
      <vardef> at 3:2.
        <type> at 3:2.
        </type> at 3:12.
      </vardef> at 5:2.
      <statements> at 5:2.
        <statement> at 5:2.
          <assign> at 5:2.
            <simple> at 5:18.
              <term> at 5:18.
                <factor> at 5:18.
                  <expr> at 5:19.
                    <simple> at 5:19.
                      <term> at 5:19.
                        <factor> at 5:19.
                        </factor> at 5:20.
                      </term> at 5:20.
                      <term> at 5:21.
                        <factor> at 5:21.
                        </factor> at 5:22.
                      </term> at 5:22.
                    </simple> at 5:22.
                  </expr> at 5:22.
                </factor> at 5:23.
              </term> at 5:23.
            </simple> at 5:23.
          </assign> at 5:23.
        </statement> at 5:23.
        <statement> at 7:2.
          <while> at 7:2.
            <expr> at 7:8.
              <simple> at 7:8.
                <term> at 7:8.
                  <factor> at 7:8.
                    <expr> at 7:9.
                      <simple> at 7:9.
                        <term> at 7:9.
                          <factor> at 7:9.
                          </factor> at 7:11.
                        </term> at 7:11.
                      </simple> at 7:11.
                      <simple> at 7:14.
                        <term> at 7:14.
                          <factor> at 7:14.
                          </factor> at 7:15.
                        </term> at 7:15.
                      </simple> at 7:15.
                    </expr> at 7:15.
                  </factor> at 7:17.
                  <factor> at 7:21.
                    <factor> at 7:24.
                      <expr> at 7:25.
                        <simple> at 7:25.
                          <term> at 7:25.
                            <factor> at 7:25.
                            </factor> at 7:26.
                          </term> at 7:26.
                        </simple> at 7:26.
                      </expr> at 7:26.
                    </factor> at 7:27.
                  </factor> at 7:27.
                </term> at 7:27.
              </simple> at 7:27.
            </expr> at 7:27.
            <statements> at 8:3.
              <statement> at 8:3.
                <assign> at 8:3.
                  <index> at 8:10.
                    <simple> at 8:11.
                      <term> at 8:11.
                        <factor> at 8:11.
                        </factor> at 8:12.
                      </term> at 8:12.
                    </simple> at 8:12.
                  </index> at 8:14.
                  <expr> at 8:16.
                    <simple> at 8:16.
                      <term> at 8:16.
                        <factor> at 8:16.
                        </factor> at 8:17.
                      </term> at 8:17.
                    </simple> at 8:17.
                  </expr> at 8:17.
                </assign> at 8:17.
              </statement> at 8:17.
              <statement> at 9:3.
                <assign> at 9:3.
                  <expr> at 9:11.
                    <simple> at 9:11.
                      <term> at 9:11.
                        <factor> at 9:11.
                        </factor> at 9:12.
                      </term> at 9:12.
                      <term> at 9:13.
                        <factor> at 9:13.
                        </factor> at 10:2.
                      </term> at 10:2.
                    </simple> at 10:2.
                  </expr> at 10:2.
                </assign> at 10:2.
              </statement> at 10:2.
            </statements> at 10:2.
          </while> at 10:5.
        </statement> at 10:5.
        <statement> at 12:2.
          <return> at 12:2.
            <expr> at 12:9.
              <simple> at 12:9.
                <term> at 12:9.
                  <factor> at 12:9.
                  </factor> at 14:1.
                </term> at 14:1.
              </simple> at 14:1.
            </expr> at 14:1.
          </return> at 14:1.
        </statement> at 14:1.
      </statements> at 14:1.
    </body> at 14:1.
  </subdef> at 14:1.
  <body> at 15:2.
    <vardef> at 15:2.
      <type> at 15:2.
      </type> at 15:12.
    </vardef> at 16:2.
    <vardef> at 16:2.
      <type> at 16:2.
      </type> at 16:6.
    </vardef> at 18:2.
    <statements> at 18:2.
      <statement> at 18:2.
        <assign> at 18:2.
          <expr> at 18:12.
            <simple> at 18:12.
              <term> at 18:12.
                <factor> at 18:12.
                </factor> at 18:17.
              </term> at 18:17.
            </simple> at 18:17.
          </expr> at 18:17.
        </assign> at 18:17.
      </statement> at 18:17.
      <statement> at 20:2.
        <assign> at 20:2.
          <expr> at 20:15.
            <simple> at 20:15.
              <term> at 20:15.
                <factor> at 20:15.
                  <arglist> at 20:18.
                    <expr> at 20:19.
                      <simple> at 20:19.
                        <term> at 20:19.
                          <factor> at 20:19.
                          </factor> at 20:23.
                        </term> at 20:23.
                      </simple> at 20:23.
                    </expr> at 20:23.
                    <expr> at 20:24.
                      <simple> at 20:24.
                        <term> at 20:24.
                          <factor> at 20:24.
                          </factor> at 20:29.
                        </term> at 20:29.
                      </simple> at 20:29.
                    </expr> at 20:29.
                  </arglist> at 20:30.
                </factor> at 20:30.
              </term> at 20:30.
            </simple> at 20:30.
          </expr> at 20:30.
        </assign> at 20:30.
      </statement> at 20:30.
      <statement> at 22:2.
        <while> at 22:2.
          <expr> at 22:8.
            <simple> at 22:8.
              <term> at 22:8.
                <factor> at 22:8.
                  <expr> at 22:9.
                    <simple> at 22:9.
                      <term> at 22:9.
                        <factor> at 22:9.
                        </factor> at 22:13.
                      </term> at 22:13.
                    </simple> at 22:13.
                    <simple> at 22:16.
                      <term> at 22:16.
                        <factor> at 22:16.
                        </factor> at 22:17.
                      </term> at 22:17.
                    </simple> at 22:17.
                  </expr> at 22:17.
                </factor> at 22:18.
              </term> at 22:18.
            </simple> at 22:18.
          </expr> at 22:18.
          <statements> at 23:3.
            <statement> at 23:3.
              <output> at 23:3.
                <expr> at 23:10.
                  <simple> at 23:10.
                    <term> at 23:10.
                      <factor> at 23:10.
                        <index> at 23:16.
                          <simple> at 23:17.
                            <term> at 23:17.
                              <factor> at 23:17.
                              </factor> at 23:20.
                            </term> at 23:20.
                          </simple> at 23:20.
                        </index> at 23:22.
                      </factor> at 23:22.
                    </term> at 23:22.
                  </simple> at 23:22.
                </expr> at 23:22.
              </output> at 23:30.
            </statement> at 23:30.
            <statement> at 24:3.
              <assign> at 24:3.
                <expr> at 24:13.
                  <simple> at 24:13.
                    <term> at 24:13.
                      <factor> at 24:13.
                      </factor> at 24:17.
                    </term> at 24:17.
                    <term> at 24:18.
                      <factor> at 24:18.
                      </factor> at 25:2.
                    </term> at 25:2.
                  </simple> at 25:2.
                </expr> at 25:2.
              </assign> at 25:2.
            </statement> at 25:2.
          </statements> at 25:2.
        </while> at 26:1.
      </statement> at 26:1.
    </statements> at 26:1.
  </body> at 26:1.
</program> at 26:1.
Generated: test34.class
.class public test34
.super java/lang/Object

.field private static final charsetName Ljava/lang/String;
.field private static final usLocale Ljava/util/Locale;
.field private static final scanner Ljava/util/Scanner;

.method static public <clinit>()V
.limit stack 5
.limit locals 1 
	ldc	"UTF-8"
	putstatic test34/charsetName Ljava/lang/String;
	new	java/util/Locale
	dup
	ldc	"en"
	ldc	"US"
	invokespecial java/util/Locale/<init>(Ljava/lang/String;Ljava/lang/String;)V
	putstatic test34/usLocale Ljava/util/Locale;
	new	java/util/Scanner
	dup
	new	java/io/BufferedInputStream
	dup
	getstatic java/lang/System/in Ljava/io/InputStream;
	invokespecial java/io/BufferedInputStream/<init>(Ljava/io/InputStream;)V
	getstatic test34/charsetName Ljava/lang/String;
	invokespecial java/util/Scanner/<init>(Ljava/io/InputStream;Ljava/lang/String;)V
	putstatic test34/scanner Ljava/util/Scanner;
	getstatic test34/scanner Ljava/util/Scanner;
	getstatic test34/usLocale Ljava/util/Locale;
	invokevirtual java/util/Scanner/useLocale(Ljava/util/Locale;)Ljava/util/Scanner;
	pop
	return
.end method

.method public <init>()V
	aload_0
	invokespecial java/lang/Object/<init>()V
	return
.end method

.method public static readInt()I
.limit stack 1
.limit locals 1
	getstatic test34/scanner Ljava/util/Scanner;
	invokevirtual java/util/Scanner/nextInt()I
	ireturn
.end method

.method public static readBoolean()Z
.limit stack 2
.limit locals 1
	getstatic test34/scanner Ljava/util/Scanner;
	invokevirtual java/util/Scanner/next()Ljava/lang/String;
	astore 0
	aload 0
	ldc	"true"
	invokevirtual java/lang/String/equalsIgnoreCase(Ljava/lang/String;)Z
	ifeq False
	iconst_1
	ireturn
False:
	aload 0
	ldc	"false"
	invokevirtual java/lang/String/equalsIgnoreCase(Ljava/lang/String;)Z
	ifeq Exception
	iconst_0
	ireturn
Exception:
	new	java/util/InputMismatchException
	dup
	invokespecial java/util/InputMismatchException/<init>()V
	athrow
.end method

.method public static main([Ljava/lang/String;)V
.limit stack 10
.limit locals 3
	ldc 10000
	istore 2
	iload 2
	ldc 0
	invokestatic test34.foo(II)[I
	astore 1
L5:
	iload 2
	ldc 0
	if_icmpne L7
	ldc 0
	goto L8
L7:
	ldc 1
L8:
	ifeq L6
	aload 1
	iload 2
	iaload
	getstatic java/lang/System/out Ljava/io/PrintStream;
	swap
	invokevirtual java/io/PrintStream/print(I)V
	getstatic java/lang/System/out Ljava/io/PrintStream;
	ldc "\n"
	invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V
	iload 2
	ldc 1
	isub
	istore 2
	goto L5
L6:
	return
.end method

.method public static foo(II)[I
.limit stack 5
.limit locals 3
	iload 0
	ldc 1
	iadd
	newarray int
	astore 2
L1:
	iload 0
	ldc 0
	if_icmpne L3
	ldc 0
	goto L4
L3:
	ldc 1
L4:
	iload 1
	ldc 1
	ixor
	iand
	ifeq L2
	aload 2
	iload 0
	iload 0
	iastore
	iload 0
	ldc 1
	isub
	istore 0
	goto L1
L2:
	aload 2
	areturn
	return
.end method

Success!
